directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateEntitlementInput is used for create Entitlement object.
Input was generated by ent.
"""
input CreateEntitlementInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  tier: EntitlementTier
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  expiresAt: Time
  upgradedAt: Time
  """the tier the customer upgraded from"""
  upgradedTier: String
  downgradedAt: Time
  """the tier the customer downgraded from"""
  downgradedTier: String
  cancelled: Boolean
  ownerID: ID
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  name: String!
  description: String
  logoURL: String!
  """The group's displayed 'friendly' name"""
  displayName: String
  settingID: ID!
  userIDs: [ID!]
  ownerID: ID
}
"""
CreateGroupSettingInput is used for create GroupSetting object.
Input was generated by ent.
"""
input CreateGroupSettingInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  visibility: GroupSettingVisibility
  joinPolicy: GroupSettingJoinPolicy
  """tags associated with the object"""
  tags: [String!]
  syncToSlack: Boolean
  syncToGithub: Boolean
  groupID: ID
}
"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  name: String!
  kind: String!
  description: String
  secretName: String!
  ownerID: ID
}
"""
CreateOauthProviderInput is used for create OauthProvider object.
Input was generated by ent.
"""
input CreateOauthProviderInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """the provider's name"""
  name: String!
  """the client id"""
  clientID: String!
  """the client secret"""
  clientSecret: String!
  """the redirect url"""
  redirectURL: String!
  """the scopes"""
  scopes: String!
  """the auth url of the provider"""
  authURL: String!
  """the token url of the provider"""
  tokenURL: String!
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Int!
  """the URL to request user information by token"""
  infoURL: String!
  ownerID: ID
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  name: String!
  """The organization's displayed 'friendly' name"""
  displayName: String
  """An optional description of the Organization"""
  description: String
  parentID: ID
  userIDs: [ID!]
  groupIDs: [ID!]
  integrationIDs: [ID!]
  settingID: ID
  entitlementIDs: [ID!]
  oauthproviderIDs: [ID!]
}
"""
CreateOrganizationSettingInput is used for create OrganizationSetting object.
Input was generated by ent.
"""
input CreateOrganizationSettingInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """domains associated with the organization"""
  domains: [String!]!
  ssoCert: String
  ssoEntrypoint: String
  ssoIssuer: String
  """Name of the person to contact for billing"""
  billingContact: String!
  billingEmail: String!
  billingPhone: String!
  billingAddress: String!
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String!
  """tags associated with the object"""
  tags: [String!]
  organizationID: ID
}
"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  name: String!
  token: String!
  abilities: [String!]
  expirationAt: Time!
  lastUsedAt: Time
  userID: ID!
}
"""
CreateRefreshTokenInput is used for create RefreshToken object.
Input was generated by ent.
"""
input CreateRefreshTokenInput {
  clientID: String!
  scopes: [String!]
  nonce: String!
  claimsUserID: String!
  claimsUsername: String!
  claimsEmail: String!
  claimsEmailVerified: Boolean!
  claimsGroups: [String!]
  claimsPreferredUsername: String!
  connectorID: String!
  connectorData: [String!]
  token: String!
  obsoleteToken: String!
  lastUsed: Time
  userID: ID
}
"""
CreateSessionInput is used for create Session object.
Input was generated by ent.
"""
input CreateSessionInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """Sessions can derrive from the local (password auth), oauth, or app_password"""
  type: SessionType!
  """The session may be disabled by the user or by automatic security policy"""
  disabled: Boolean!
  """random 32 bytes encoded as base64"""
  token: String
  """The last known user-agent"""
  userAgent: String
  """All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
  ips: String!
  usersID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  email: String!
  firstName: String!
  lastName: String!
  """The user's displayed 'friendly' name"""
  displayName: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The user's local avatar file"""
  avatarLocalFile: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  """the time the user was last seen"""
  lastSeen: Time
  """user bcrypt password hash"""
  passwordhash: String
  """the Subject of the user JWT"""
  sub: String
  """whether the user uses oauth for login or not"""
  oauth: Boolean
  organizationIDs: [ID!]
  sessionIDs: [ID!]
  groupIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  settingID: ID!
  refreshtokenIDs: [ID!]
}
"""
CreateUserSettingInput is used for create UserSetting object.
Input was generated by ent.
"""
input CreateUserSettingInput {
  createdAt: Time
  updatedAt: Time
  createdBy: String
  updatedBy: String
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """The time the user was suspended"""
  suspendedAt: Time
  """local user password recovery code generated during account creation - does not exist for oauth'd users"""
  recoveryCode: String
  status: UserSettingStatus
  role: UserSettingRole
  permissions: [String!]
  emailConfirmed: Boolean
  """tags associated with the object"""
  tags: [String!]
  userID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Entitlement implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  tier: EntitlementTier!
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  expiresAt: Time
  upgradedAt: Time
  """the tier the customer upgraded from"""
  upgradedTier: String
  downgradedAt: Time
  """the tier the customer downgraded from"""
  downgradedTier: String
  cancelled: Boolean!
  owner: Organization
}
"""A connection to a list of items."""
type EntitlementConnection {
  """A list of edges."""
  edges: [EntitlementEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EntitlementEdge {
  """The item at the end of the edge."""
  node: Entitlement
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""EntitlementTier is enum for the field tier"""
enum EntitlementTier @goModel(model: "github.com/datumforge/datum/internal/ent/generated/entitlement.Tier") {
  free
  pro
  enterprise
}
"""
EntitlementWhereInput is used for filtering Entitlement objects.
Input was generated by ent.
"""
input EntitlementWhereInput {
  not: EntitlementWhereInput
  and: [EntitlementWhereInput!]
  or: [EntitlementWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """tier field predicates"""
  tier: EntitlementTier
  tierNEQ: EntitlementTier
  tierIn: [EntitlementTier!]
  tierNotIn: [EntitlementTier!]
  """external_customer_id field predicates"""
  externalCustomerID: String
  externalCustomerIDNEQ: String
  externalCustomerIDIn: [String!]
  externalCustomerIDNotIn: [String!]
  externalCustomerIDGT: String
  externalCustomerIDGTE: String
  externalCustomerIDLT: String
  externalCustomerIDLTE: String
  externalCustomerIDContains: String
  externalCustomerIDHasPrefix: String
  externalCustomerIDHasSuffix: String
  externalCustomerIDIsNil: Boolean
  externalCustomerIDNotNil: Boolean
  externalCustomerIDEqualFold: String
  externalCustomerIDContainsFold: String
  """external_subscription_id field predicates"""
  externalSubscriptionID: String
  externalSubscriptionIDNEQ: String
  externalSubscriptionIDIn: [String!]
  externalSubscriptionIDNotIn: [String!]
  externalSubscriptionIDGT: String
  externalSubscriptionIDGTE: String
  externalSubscriptionIDLT: String
  externalSubscriptionIDLTE: String
  externalSubscriptionIDContains: String
  externalSubscriptionIDHasPrefix: String
  externalSubscriptionIDHasSuffix: String
  externalSubscriptionIDIsNil: Boolean
  externalSubscriptionIDNotNil: Boolean
  externalSubscriptionIDEqualFold: String
  externalSubscriptionIDContainsFold: String
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtIsNil: Boolean
  expiresAtNotNil: Boolean
  """upgraded_at field predicates"""
  upgradedAt: Time
  upgradedAtNEQ: Time
  upgradedAtIn: [Time!]
  upgradedAtNotIn: [Time!]
  upgradedAtGT: Time
  upgradedAtGTE: Time
  upgradedAtLT: Time
  upgradedAtLTE: Time
  upgradedAtIsNil: Boolean
  upgradedAtNotNil: Boolean
  """upgraded_tier field predicates"""
  upgradedTier: String
  upgradedTierNEQ: String
  upgradedTierIn: [String!]
  upgradedTierNotIn: [String!]
  upgradedTierGT: String
  upgradedTierGTE: String
  upgradedTierLT: String
  upgradedTierLTE: String
  upgradedTierContains: String
  upgradedTierHasPrefix: String
  upgradedTierHasSuffix: String
  upgradedTierIsNil: Boolean
  upgradedTierNotNil: Boolean
  upgradedTierEqualFold: String
  upgradedTierContainsFold: String
  """downgraded_at field predicates"""
  downgradedAt: Time
  downgradedAtNEQ: Time
  downgradedAtIn: [Time!]
  downgradedAtNotIn: [Time!]
  downgradedAtGT: Time
  downgradedAtGTE: Time
  downgradedAtLT: Time
  downgradedAtLTE: Time
  downgradedAtIsNil: Boolean
  downgradedAtNotNil: Boolean
  """downgraded_tier field predicates"""
  downgradedTier: String
  downgradedTierNEQ: String
  downgradedTierIn: [String!]
  downgradedTierNotIn: [String!]
  downgradedTierGT: String
  downgradedTierGTE: String
  downgradedTierLT: String
  downgradedTierLTE: String
  downgradedTierContains: String
  downgradedTierHasPrefix: String
  downgradedTierHasSuffix: String
  downgradedTierIsNil: Boolean
  downgradedTierNotNil: Boolean
  downgradedTierEqualFold: String
  downgradedTierContainsFold: String
  """cancelled field predicates"""
  cancelled: Boolean
  cancelledNEQ: Boolean
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
type Group implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  name: String!
  description: String!
  logoURL: String!
  """The group's displayed 'friendly' name"""
  displayName: String!
  setting: GroupSetting!
  users: [User!]
  owner: Organization
}
"""A connection to a list of items."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Group connections"""
input GroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Groups."""
  field: GroupOrderField!
}
"""Properties by which Group connections can be ordered."""
enum GroupOrderField {
  name
  display_name
}
type GroupSetting implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  visibility: GroupSettingVisibility!
  joinPolicy: GroupSettingJoinPolicy!
  """tags associated with the object"""
  tags: [String!]!
  syncToSlack: Boolean!
  syncToGithub: Boolean!
  group: Group
}
"""A connection to a list of items."""
type GroupSettingConnection {
  """A list of edges."""
  edges: [GroupSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupSettingEdge {
  """The item at the end of the edge."""
  node: GroupSetting
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""GroupSettingJoinPolicy is enum for the field join_policy"""
enum GroupSettingJoinPolicy @goModel(model: "github.com/datumforge/datum/internal/ent/generated/groupsetting.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""GroupSettingVisibility is enum for the field visibility"""
enum GroupSettingVisibility @goModel(model: "github.com/datumforge/datum/internal/ent/generated/groupsetting.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingWhereInput is used for filtering GroupSetting objects.
Input was generated by ent.
"""
input GroupSettingWhereInput {
  not: GroupSettingWhereInput
  and: [GroupSettingWhereInput!]
  or: [GroupSettingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """visibility field predicates"""
  visibility: GroupSettingVisibility
  visibilityNEQ: GroupSettingVisibility
  visibilityIn: [GroupSettingVisibility!]
  visibilityNotIn: [GroupSettingVisibility!]
  """join_policy field predicates"""
  joinPolicy: GroupSettingJoinPolicy
  joinPolicyNEQ: GroupSettingJoinPolicy
  joinPolicyIn: [GroupSettingJoinPolicy!]
  joinPolicyNotIn: [GroupSettingJoinPolicy!]
  """sync_to_slack field predicates"""
  syncToSlack: Boolean
  syncToSlackNEQ: Boolean
  """sync_to_github field predicates"""
  syncToGithub: Boolean
  syncToGithubNEQ: Boolean
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [GroupSettingWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
type Integration implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  name: String!
  kind: String!
  description: String
  secretName: String!
  owner: Organization
}
"""A connection to a list of items."""
type IntegrationConnection {
  """A list of edges."""
  edges: [IntegrationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type IntegrationEdge {
  """The item at the end of the edge."""
  node: Integration
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Integration connections"""
input IntegrationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Integrations."""
  field: IntegrationOrderField!
}
"""Properties by which Integration connections can be ordered."""
enum IntegrationOrderField {
  name
  kind
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
  not: IntegrationWhereInput
  and: [IntegrationWhereInput!]
  or: [IntegrationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """kind field predicates"""
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindEqualFold: String
  kindContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """secret_name field predicates"""
  secretName: String
  secretNameNEQ: String
  secretNameIn: [String!]
  secretNameNotIn: [String!]
  secretNameGT: String
  secretNameGTE: String
  secretNameLT: String
  secretNameLTE: String
  secretNameContains: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameEqualFold: String
  secretNameContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
"""A valid JSON string."""
scalar JSON
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/datumforge/datum/internal/ent/generated.Noder") {
  """The id of the object."""
  id: ID!
}
type OauthProvider implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  """the provider's name"""
  name: String!
  """the client id"""
  clientID: String!
  """the redirect url"""
  redirectURL: String!
  """the scopes"""
  scopes: String!
  """the auth url of the provider"""
  authURL: String!
  """the token url of the provider"""
  tokenURL: String!
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Int!
  """the URL to request user information by token"""
  infoURL: String!
  owner: Organization
}
"""A connection to a list of items."""
type OauthProviderConnection {
  """A list of edges."""
  edges: [OauthProviderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type OauthProviderEdge {
  """The item at the end of the edge."""
  node: OauthProvider
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
OauthProviderWhereInput is used for filtering OauthProvider objects.
Input was generated by ent.
"""
input OauthProviderWhereInput {
  not: OauthProviderWhereInput
  and: [OauthProviderWhereInput!]
  or: [OauthProviderWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """client_id field predicates"""
  clientID: String
  clientIDNEQ: String
  clientIDIn: [String!]
  clientIDNotIn: [String!]
  clientIDGT: String
  clientIDGTE: String
  clientIDLT: String
  clientIDLTE: String
  clientIDContains: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDEqualFold: String
  clientIDContainsFold: String
  """redirect_url field predicates"""
  redirectURL: String
  redirectURLNEQ: String
  redirectURLIn: [String!]
  redirectURLNotIn: [String!]
  redirectURLGT: String
  redirectURLGTE: String
  redirectURLLT: String
  redirectURLLTE: String
  redirectURLContains: String
  redirectURLHasPrefix: String
  redirectURLHasSuffix: String
  redirectURLEqualFold: String
  redirectURLContainsFold: String
  """scopes field predicates"""
  scopes: String
  scopesNEQ: String
  scopesIn: [String!]
  scopesNotIn: [String!]
  scopesGT: String
  scopesGTE: String
  scopesLT: String
  scopesLTE: String
  scopesContains: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesEqualFold: String
  scopesContainsFold: String
  """auth_url field predicates"""
  authURL: String
  authURLNEQ: String
  authURLIn: [String!]
  authURLNotIn: [String!]
  authURLGT: String
  authURLGTE: String
  authURLLT: String
  authURLLTE: String
  authURLContains: String
  authURLHasPrefix: String
  authURLHasSuffix: String
  authURLEqualFold: String
  authURLContainsFold: String
  """token_url field predicates"""
  tokenURL: String
  tokenURLNEQ: String
  tokenURLIn: [String!]
  tokenURLNotIn: [String!]
  tokenURLGT: String
  tokenURLGTE: String
  tokenURLLT: String
  tokenURLLTE: String
  tokenURLContains: String
  tokenURLHasPrefix: String
  tokenURLHasSuffix: String
  tokenURLEqualFold: String
  tokenURLContainsFold: String
  """auth_style field predicates"""
  authStyle: Int
  authStyleNEQ: Int
  authStyleIn: [Int!]
  authStyleNotIn: [Int!]
  authStyleGT: Int
  authStyleGTE: Int
  authStyleLT: Int
  authStyleLTE: Int
  """info_url field predicates"""
  infoURL: String
  infoURLNEQ: String
  infoURLIn: [String!]
  infoURLNotIn: [String!]
  infoURLGT: String
  infoURLGTE: String
  infoURLLT: String
  infoURLLTE: String
  infoURLContains: String
  infoURLHasPrefix: String
  infoURLHasSuffix: String
  infoURLEqualFold: String
  infoURLContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type Organization implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  deletedAt: Time
  deletedBy: String
  name: String!
  """The organization's displayed 'friendly' name"""
  displayName: String!
  """An optional description of the Organization"""
  description: String
  parent: Organization
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Organizations returned from the connection."""
    orderBy: OrganizationOrder

    """Filtering options for Organizations returned from the connection."""
    where: OrganizationWhereInput
  ): OrganizationConnection!
  users: [User!]
  groups: [Group!]
  integrations: [Integration!]
  setting: OrganizationSetting
  entitlements: [Entitlement!]
  oauthprovider: [OauthProvider!]
}
"""A connection to a list of items."""
type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Organization connections"""
input OrganizationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Organizations."""
  field: OrganizationOrderField!
}
"""Properties by which Organization connections can be ordered."""
enum OrganizationOrderField {
  name
  display_name
}
type OrganizationSetting implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  """domains associated with the organization"""
  domains: [String!]!
  ssoCert: String!
  ssoEntrypoint: String!
  ssoIssuer: String!
  """Name of the person to contact for billing"""
  billingContact: String!
  billingEmail: String!
  billingPhone: String!
  billingAddress: String!
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String!
  """tags associated with the object"""
  tags: [String!]
  organization: Organization
}
"""A connection to a list of items."""
type OrganizationSettingConnection {
  """A list of edges."""
  edges: [OrganizationSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type OrganizationSettingEdge {
  """The item at the end of the edge."""
  node: OrganizationSetting
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
OrganizationSettingWhereInput is used for filtering OrganizationSetting objects.
Input was generated by ent.
"""
input OrganizationSettingWhereInput {
  not: OrganizationSettingWhereInput
  and: [OrganizationSettingWhereInput!]
  or: [OrganizationSettingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """sso_cert field predicates"""
  ssoCert: String
  ssoCertNEQ: String
  ssoCertIn: [String!]
  ssoCertNotIn: [String!]
  ssoCertGT: String
  ssoCertGTE: String
  ssoCertLT: String
  ssoCertLTE: String
  ssoCertContains: String
  ssoCertHasPrefix: String
  ssoCertHasSuffix: String
  ssoCertEqualFold: String
  ssoCertContainsFold: String
  """sso_entrypoint field predicates"""
  ssoEntrypoint: String
  ssoEntrypointNEQ: String
  ssoEntrypointIn: [String!]
  ssoEntrypointNotIn: [String!]
  ssoEntrypointGT: String
  ssoEntrypointGTE: String
  ssoEntrypointLT: String
  ssoEntrypointLTE: String
  ssoEntrypointContains: String
  ssoEntrypointHasPrefix: String
  ssoEntrypointHasSuffix: String
  ssoEntrypointEqualFold: String
  ssoEntrypointContainsFold: String
  """sso_issuer field predicates"""
  ssoIssuer: String
  ssoIssuerNEQ: String
  ssoIssuerIn: [String!]
  ssoIssuerNotIn: [String!]
  ssoIssuerGT: String
  ssoIssuerGTE: String
  ssoIssuerLT: String
  ssoIssuerLTE: String
  ssoIssuerContains: String
  ssoIssuerHasPrefix: String
  ssoIssuerHasSuffix: String
  ssoIssuerEqualFold: String
  ssoIssuerContainsFold: String
  """billing_contact field predicates"""
  billingContact: String
  billingContactNEQ: String
  billingContactIn: [String!]
  billingContactNotIn: [String!]
  billingContactGT: String
  billingContactGTE: String
  billingContactLT: String
  billingContactLTE: String
  billingContactContains: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactEqualFold: String
  billingContactContainsFold: String
  """billing_email field predicates"""
  billingEmail: String
  billingEmailNEQ: String
  billingEmailIn: [String!]
  billingEmailNotIn: [String!]
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailContains: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailEqualFold: String
  billingEmailContainsFold: String
  """billing_phone field predicates"""
  billingPhone: String
  billingPhoneNEQ: String
  billingPhoneIn: [String!]
  billingPhoneNotIn: [String!]
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneContains: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneEqualFold: String
  billingPhoneContainsFold: String
  """billing_address field predicates"""
  billingAddress: String
  billingAddressNEQ: String
  billingAddressIn: [String!]
  billingAddressNotIn: [String!]
  billingAddressGT: String
  billingAddressGTE: String
  billingAddressLT: String
  billingAddressLTE: String
  billingAddressContains: String
  billingAddressHasPrefix: String
  billingAddressHasSuffix: String
  billingAddressEqualFold: String
  billingAddressContainsFold: String
  """tax_identifier field predicates"""
  taxIdentifier: String
  taxIdentifierNEQ: String
  taxIdentifierIn: [String!]
  taxIdentifierNotIn: [String!]
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierContains: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierEqualFold: String
  taxIdentifierContainsFold: String
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByNEQ: String
  deletedByIn: [String!]
  deletedByNotIn: [String!]
  deletedByGT: String
  deletedByGTE: String
  deletedByLT: String
  deletedByLTE: String
  deletedByContains: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIsNil: Boolean
  deletedByNotNil: Boolean
  deletedByEqualFold: String
  deletedByContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """parent_organization_id field predicates"""
  parentOrganizationID: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDNotNil: Boolean
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDContainsFold: ID
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """integrations edge predicates"""
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [OrganizationSettingWhereInput!]
  """entitlements edge predicates"""
  hasEntitlements: Boolean
  hasEntitlementsWith: [EntitlementWhereInput!]
  """oauthprovider edge predicates"""
  hasOauthprovider: Boolean
  hasOauthproviderWith: [OauthProviderWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type PersonalAccessToken implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  name: String!
  userID: ID!
  abilities: [String!]
  expirationAt: Time!
  lastUsedAt: Time
  user: User!
}
"""A connection to a list of items."""
type PersonalAccessTokenConnection {
  """A list of edges."""
  edges: [PersonalAccessTokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PersonalAccessTokenEdge {
  """The item at the end of the edge."""
  node: PersonalAccessToken
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
  not: PersonalAccessTokenWhereInput
  and: [PersonalAccessTokenWhereInput!]
  or: [PersonalAccessTokenWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID
  """expiration_at field predicates"""
  expirationAt: Time
  expirationAtNEQ: Time
  expirationAtIn: [Time!]
  expirationAtNotIn: [Time!]
  expirationAtGT: Time
  expirationAtGTE: Time
  expirationAtLT: Time
  expirationAtLTE: Time
  """last_used_at field predicates"""
  lastUsedAt: Time
  lastUsedAtNEQ: Time
  lastUsedAtIn: [Time!]
  lastUsedAtNotIn: [Time!]
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtIsNil: Boolean
  lastUsedAtNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  entitlements(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Entitlements returned from the connection."""
    where: EntitlementWhereInput
  ): EntitlementConnection!
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Groups returned from the connection."""
    orderBy: GroupOrder

    """Filtering options for Groups returned from the connection."""
    where: GroupWhereInput
  ): GroupConnection!
  groupSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for GroupSettings returned from the connection."""
    where: GroupSettingWhereInput
  ): GroupSettingConnection!
  integrations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Integrations returned from the connection."""
    orderBy: IntegrationOrder

    """Filtering options for Integrations returned from the connection."""
    where: IntegrationWhereInput
  ): IntegrationConnection!
  oauthProviders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for OauthProviders returned from the connection."""
    where: OauthProviderWhereInput
  ): OauthProviderConnection!
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Organizations returned from the connection."""
    orderBy: OrganizationOrder

    """Filtering options for Organizations returned from the connection."""
    where: OrganizationWhereInput
  ): OrganizationConnection!
  organizationSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for OrganizationSettings returned from the connection."""
    where: OrganizationSettingWhereInput
  ): OrganizationSettingConnection!
  personalAccessTokens(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for PersonalAccessTokens returned from the connection."""
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  refreshTokens(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for RefreshTokens returned from the connection."""
    where: RefreshTokenWhereInput
  ): RefreshTokenConnection!
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Sessions returned from the connection."""
    where: SessionWhereInput
  ): SessionConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  userSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for UserSettings returned from the connection."""
    where: UserSettingWhereInput
  ): UserSettingConnection!
}
type RefreshToken implements Node {
  id: ID!
  clientID: String!
  scopes: [String!]
  nonce: String!
  claimsUserID: String!
  claimsUsername: String!
  claimsEmail: String!
  claimsEmailVerified: Boolean!
  claimsGroups: [String!]
  claimsPreferredUsername: String!
  connectorID: String!
  connectorData: [String!]
  token: String!
  obsoleteToken: String!
  lastUsed: Time!
  user: User
}
"""A connection to a list of items."""
type RefreshTokenConnection {
  """A list of edges."""
  edges: [RefreshTokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type RefreshTokenEdge {
  """The item at the end of the edge."""
  node: RefreshToken
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
RefreshTokenWhereInput is used for filtering RefreshToken objects.
Input was generated by ent.
"""
input RefreshTokenWhereInput {
  not: RefreshTokenWhereInput
  and: [RefreshTokenWhereInput!]
  or: [RefreshTokenWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """client_id field predicates"""
  clientID: String
  clientIDNEQ: String
  clientIDIn: [String!]
  clientIDNotIn: [String!]
  clientIDGT: String
  clientIDGTE: String
  clientIDLT: String
  clientIDLTE: String
  clientIDContains: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDEqualFold: String
  clientIDContainsFold: String
  """nonce field predicates"""
  nonce: String
  nonceNEQ: String
  nonceIn: [String!]
  nonceNotIn: [String!]
  nonceGT: String
  nonceGTE: String
  nonceLT: String
  nonceLTE: String
  nonceContains: String
  nonceHasPrefix: String
  nonceHasSuffix: String
  nonceEqualFold: String
  nonceContainsFold: String
  """claims_user_id field predicates"""
  claimsUserID: String
  claimsUserIDNEQ: String
  claimsUserIDIn: [String!]
  claimsUserIDNotIn: [String!]
  claimsUserIDGT: String
  claimsUserIDGTE: String
  claimsUserIDLT: String
  claimsUserIDLTE: String
  claimsUserIDContains: String
  claimsUserIDHasPrefix: String
  claimsUserIDHasSuffix: String
  claimsUserIDEqualFold: String
  claimsUserIDContainsFold: String
  """claims_username field predicates"""
  claimsUsername: String
  claimsUsernameNEQ: String
  claimsUsernameIn: [String!]
  claimsUsernameNotIn: [String!]
  claimsUsernameGT: String
  claimsUsernameGTE: String
  claimsUsernameLT: String
  claimsUsernameLTE: String
  claimsUsernameContains: String
  claimsUsernameHasPrefix: String
  claimsUsernameHasSuffix: String
  claimsUsernameEqualFold: String
  claimsUsernameContainsFold: String
  """claims_email field predicates"""
  claimsEmail: String
  claimsEmailNEQ: String
  claimsEmailIn: [String!]
  claimsEmailNotIn: [String!]
  claimsEmailGT: String
  claimsEmailGTE: String
  claimsEmailLT: String
  claimsEmailLTE: String
  claimsEmailContains: String
  claimsEmailHasPrefix: String
  claimsEmailHasSuffix: String
  claimsEmailEqualFold: String
  claimsEmailContainsFold: String
  """claims_email_verified field predicates"""
  claimsEmailVerified: Boolean
  claimsEmailVerifiedNEQ: Boolean
  """claims_preferred_username field predicates"""
  claimsPreferredUsername: String
  claimsPreferredUsernameNEQ: String
  claimsPreferredUsernameIn: [String!]
  claimsPreferredUsernameNotIn: [String!]
  claimsPreferredUsernameGT: String
  claimsPreferredUsernameGTE: String
  claimsPreferredUsernameLT: String
  claimsPreferredUsernameLTE: String
  claimsPreferredUsernameContains: String
  claimsPreferredUsernameHasPrefix: String
  claimsPreferredUsernameHasSuffix: String
  claimsPreferredUsernameEqualFold: String
  claimsPreferredUsernameContainsFold: String
  """connector_id field predicates"""
  connectorID: String
  connectorIDNEQ: String
  connectorIDIn: [String!]
  connectorIDNotIn: [String!]
  connectorIDGT: String
  connectorIDGTE: String
  connectorIDLT: String
  connectorIDLTE: String
  connectorIDContains: String
  connectorIDHasPrefix: String
  connectorIDHasSuffix: String
  connectorIDEqualFold: String
  connectorIDContainsFold: String
  """token field predicates"""
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """obsolete_token field predicates"""
  obsoleteToken: String
  obsoleteTokenNEQ: String
  obsoleteTokenIn: [String!]
  obsoleteTokenNotIn: [String!]
  obsoleteTokenGT: String
  obsoleteTokenGTE: String
  obsoleteTokenLT: String
  obsoleteTokenLTE: String
  obsoleteTokenContains: String
  obsoleteTokenHasPrefix: String
  obsoleteTokenHasSuffix: String
  obsoleteTokenEqualFold: String
  obsoleteTokenContainsFold: String
  """last_used field predicates"""
  lastUsed: Time
  lastUsedNEQ: Time
  lastUsedIn: [Time!]
  lastUsedNotIn: [Time!]
  lastUsedGT: Time
  lastUsedGTE: Time
  lastUsedLT: Time
  lastUsedLTE: Time
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Session implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  """Sessions can derrive from the local (password auth), oauth, or app_password"""
  type: SessionType!
  """The session may be disabled by the user or by automatic security policy"""
  disabled: Boolean!
  """random 32 bytes encoded as base64"""
  token: String!
  """The last known user-agent"""
  userAgent: String
  """All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
  ips: String!
  """Sessions belong to users"""
  users: User
}
"""A connection to a list of items."""
type SessionConnection {
  """A list of edges."""
  edges: [SessionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""SessionType is enum for the field type"""
enum SessionType @goModel(model: "github.com/datumforge/datum/internal/ent/generated/session.Type") {
  local
  oauth
  app_password
}
"""
SessionWhereInput is used for filtering Session objects.
Input was generated by ent.
"""
input SessionWhereInput {
  not: SessionWhereInput
  and: [SessionWhereInput!]
  or: [SessionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """type field predicates"""
  type: SessionType
  typeNEQ: SessionType
  typeIn: [SessionType!]
  typeNotIn: [SessionType!]
  """disabled field predicates"""
  disabled: Boolean
  disabledNEQ: Boolean
  """token field predicates"""
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """user_agent field predicates"""
  userAgent: String
  userAgentNEQ: String
  userAgentIn: [String!]
  userAgentNotIn: [String!]
  userAgentGT: String
  userAgentGTE: String
  userAgentLT: String
  userAgentLTE: String
  userAgentContains: String
  userAgentHasPrefix: String
  userAgentHasSuffix: String
  userAgentIsNil: Boolean
  userAgentNotNil: Boolean
  userAgentEqualFold: String
  userAgentContainsFold: String
  """ips field predicates"""
  ips: String
  ipsNEQ: String
  ipsIn: [String!]
  ipsNotIn: [String!]
  ipsGT: String
  ipsGTE: String
  ipsLT: String
  ipsLTE: String
  ipsContains: String
  ipsHasPrefix: String
  ipsHasSuffix: String
  ipsEqualFold: String
  ipsContainsFold: String
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateEntitlementInput is used for update Entitlement object.
Input was generated by ent.
"""
input UpdateEntitlementInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  tier: EntitlementTier
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  clearExternalCustomerID: Boolean
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  clearExternalSubscriptionID: Boolean
  expiresAt: Time
  clearExpiresAt: Boolean
  upgradedAt: Time
  clearUpgradedAt: Boolean
  """the tier the customer upgraded from"""
  upgradedTier: String
  clearUpgradedTier: Boolean
  downgradedAt: Time
  clearDowngradedAt: Boolean
  """the tier the customer downgraded from"""
  downgradedTier: String
  clearDowngradedTier: Boolean
  cancelled: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  name: String
  description: String
  logoURL: String
  """The group's displayed 'friendly' name"""
  displayName: String
  settingID: ID
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateGroupSettingInput is used for update GroupSetting object.
Input was generated by ent.
"""
input UpdateGroupSettingInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  visibility: GroupSettingVisibility
  joinPolicy: GroupSettingJoinPolicy
  """tags associated with the object"""
  tags: [String!]
  appendTags: [String!]
  syncToSlack: Boolean
  syncToGithub: Boolean
  groupID: ID
  clearGroup: Boolean
}
"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  name: String
  description: String
  clearDescription: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateOauthProviderInput is used for update OauthProvider object.
Input was generated by ent.
"""
input UpdateOauthProviderInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  """the provider's name"""
  name: String
  """the client id"""
  clientID: String
  """the client secret"""
  clientSecret: String
  """the redirect url"""
  redirectURL: String
  """the scopes"""
  scopes: String
  """the auth url of the provider"""
  authURL: String
  """the token url of the provider"""
  tokenURL: String
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Int
  """the URL to request user information by token"""
  infoURL: String
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  deletedAt: Time
  clearDeletedAt: Boolean
  deletedBy: String
  clearDeletedBy: Boolean
  name: String
  """The organization's displayed 'friendly' name"""
  displayName: String
  """An optional description of the Organization"""
  description: String
  clearDescription: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addIntegrationIDs: [ID!]
  removeIntegrationIDs: [ID!]
  clearIntegrations: Boolean
  settingID: ID
  clearSetting: Boolean
  addEntitlementIDs: [ID!]
  removeEntitlementIDs: [ID!]
  clearEntitlements: Boolean
  addOauthproviderIDs: [ID!]
  removeOauthproviderIDs: [ID!]
  clearOauthprovider: Boolean
}
"""
UpdateOrganizationSettingInput is used for update OrganizationSetting object.
Input was generated by ent.
"""
input UpdateOrganizationSettingInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  """domains associated with the organization"""
  domains: [String!]
  appendDomains: [String!]
  ssoCert: String
  ssoEntrypoint: String
  ssoIssuer: String
  """Name of the person to contact for billing"""
  billingContact: String
  billingEmail: String
  billingPhone: String
  billingAddress: String
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String
  """tags associated with the object"""
  tags: [String!]
  appendTags: [String!]
  clearTags: Boolean
  organizationID: ID
  clearOrganization: Boolean
}
"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  name: String
  token: String
  abilities: [String!]
  appendAbilities: [String!]
  clearAbilities: Boolean
  expirationAt: Time
  lastUsedAt: Time
  clearLastUsedAt: Boolean
  userID: ID
}
"""
UpdateRefreshTokenInput is used for update RefreshToken object.
Input was generated by ent.
"""
input UpdateRefreshTokenInput {
  clientID: String
  scopes: [String!]
  appendScopes: [String!]
  clearScopes: Boolean
  nonce: String
  claimsUserID: String
  claimsUsername: String
  claimsEmail: String
  claimsEmailVerified: Boolean
  claimsGroups: [String!]
  appendClaimsGroups: [String!]
  clearClaimsGroups: Boolean
  claimsPreferredUsername: String
  connectorID: String
  connectorData: [String!]
  appendConnectorData: [String!]
  clearConnectorData: Boolean
  token: String
  obsoleteToken: String
  lastUsed: Time
  userID: ID
  clearUser: Boolean
}
"""
UpdateSessionInput is used for update Session object.
Input was generated by ent.
"""
input UpdateSessionInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  """The session may be disabled by the user or by automatic security policy"""
  disabled: Boolean
  """The last known user-agent"""
  userAgent: String
  clearUserAgent: Boolean
  """All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
  ips: String
  usersID: ID
  clearUsers: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  email: String
  firstName: String
  lastName: String
  """The user's displayed 'friendly' name"""
  displayName: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  clearAvatarRemoteURL: Boolean
  """The user's local avatar file"""
  avatarLocalFile: String
  clearAvatarLocalFile: Boolean
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  clearAvatarUpdatedAt: Boolean
  """the time the user was last seen"""
  lastSeen: Time
  clearLastSeen: Boolean
  """user bcrypt password hash"""
  passwordhash: String
  clearPasswordHash: Boolean
  """the Subject of the user JWT"""
  sub: String
  clearSub: Boolean
  """whether the user uses oauth for login or not"""
  oauth: Boolean
  addOrganizationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  clearOrganizations: Boolean
  addSessionIDs: [ID!]
  removeSessionIDs: [ID!]
  clearSessions: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
  addPersonalAccessTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  clearPersonalAccessTokens: Boolean
  settingID: ID
  addRefreshtokenIDs: [ID!]
  removeRefreshtokenIDs: [ID!]
  clearRefreshtoken: Boolean
}
"""
UpdateUserSettingInput is used for update UserSetting object.
Input was generated by ent.
"""
input UpdateUserSettingInput {
  updatedAt: Time
  updatedBy: String
  clearUpdatedBy: Boolean
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  clearSilencedAt: Boolean
  """The time the user was suspended"""
  suspendedAt: Time
  clearSuspendedAt: Boolean
  """local user password recovery code generated during account creation - does not exist for oauth'd users"""
  recoveryCode: String
  clearRecoveryCode: Boolean
  status: UserSettingStatus
  role: UserSettingRole
  permissions: [String!]
  appendPermissions: [String!]
  emailConfirmed: Boolean
  """tags associated with the object"""
  tags: [String!]
  appendTags: [String!]
  userID: ID
  clearUser: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  email: String!
  firstName: String!
  lastName: String!
  """The user's displayed 'friendly' name"""
  displayName: String!
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The user's local avatar file"""
  avatarLocalFile: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  """the time the user was last seen"""
  lastSeen: Time
  """the Subject of the user JWT"""
  sub: String
  """whether the user uses oauth for login or not"""
  oauth: Boolean!
  organizations: [Organization!]
  sessions: [Session!]
  groups: [Group!]
  personalAccessTokens: [PersonalAccessToken!]
  setting: UserSetting!
  refreshtoken: [RefreshToken!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  first_name
  last_name
  display_name
}
type UserSetting implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  createdBy: String
  updatedBy: String
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean!
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """The time the user was suspended"""
  suspendedAt: Time
  status: UserSettingStatus!
  role: UserSettingRole!
  permissions: [String!]!
  emailConfirmed: Boolean!
  """tags associated with the object"""
  tags: [String!]!
  user: User
}
"""A connection to a list of items."""
type UserSettingConnection {
  """A list of edges."""
  edges: [UserSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserSettingEdge {
  """The item at the end of the edge."""
  node: UserSetting
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""UserSettingRole is enum for the field role"""
enum UserSettingRole @goModel(model: "github.com/datumforge/datum/internal/ent/generated/usersetting.Role") {
  USER
  ADMIN
  OWNER
}
"""UserSettingStatus is enum for the field status"""
enum UserSettingStatus @goModel(model: "github.com/datumforge/datum/internal/ent/generated/usersetting.Status") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
}
"""
UserSettingWhereInput is used for filtering UserSetting objects.
Input was generated by ent.
"""
input UserSettingWhereInput {
  not: UserSettingWhereInput
  and: [UserSettingWhereInput!]
  or: [UserSettingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """locked field predicates"""
  locked: Boolean
  lockedNEQ: Boolean
  """silenced_at field predicates"""
  silencedAt: Time
  silencedAtNEQ: Time
  silencedAtIn: [Time!]
  silencedAtNotIn: [Time!]
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtIsNil: Boolean
  silencedAtNotNil: Boolean
  """suspended_at field predicates"""
  suspendedAt: Time
  suspendedAtNEQ: Time
  suspendedAtIn: [Time!]
  suspendedAtNotIn: [Time!]
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtIsNil: Boolean
  suspendedAtNotNil: Boolean
  """status field predicates"""
  status: UserSettingStatus
  statusNEQ: UserSettingStatus
  statusIn: [UserSettingStatus!]
  statusNotIn: [UserSettingStatus!]
  """role field predicates"""
  role: UserSettingRole
  roleNEQ: UserSettingRole
  roleIn: [UserSettingRole!]
  roleNotIn: [UserSettingRole!]
  """email_confirmed field predicates"""
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: String
  createdByNEQ: String
  createdByIn: [String!]
  createdByNotIn: [String!]
  createdByGT: String
  createdByGTE: String
  createdByLT: String
  createdByLTE: String
  createdByContains: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIsNil: Boolean
  createdByNotNil: Boolean
  createdByEqualFold: String
  createdByContainsFold: String
  """updated_by field predicates"""
  updatedBy: String
  updatedByNEQ: String
  updatedByIn: [String!]
  updatedByNotIn: [String!]
  updatedByGT: String
  updatedByGTE: String
  updatedByLT: String
  updatedByLTE: String
  updatedByContains: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  updatedByEqualFold: String
  updatedByContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """first_name field predicates"""
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """last_name field predicates"""
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """display_name field predicates"""
  displayName: String
  displayNameNEQ: String
  displayNameIn: [String!]
  displayNameNotIn: [String!]
  displayNameGT: String
  displayNameGTE: String
  displayNameLT: String
  displayNameLTE: String
  displayNameContains: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameEqualFold: String
  displayNameContainsFold: String
  """avatar_remote_url field predicates"""
  avatarRemoteURL: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLContains: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLNotNil: Boolean
  avatarRemoteURLEqualFold: String
  avatarRemoteURLContainsFold: String
  """avatar_local_file field predicates"""
  avatarLocalFile: String
  avatarLocalFileNEQ: String
  avatarLocalFileIn: [String!]
  avatarLocalFileNotIn: [String!]
  avatarLocalFileGT: String
  avatarLocalFileGTE: String
  avatarLocalFileLT: String
  avatarLocalFileLTE: String
  avatarLocalFileContains: String
  avatarLocalFileHasPrefix: String
  avatarLocalFileHasSuffix: String
  avatarLocalFileIsNil: Boolean
  avatarLocalFileNotNil: Boolean
  avatarLocalFileEqualFold: String
  avatarLocalFileContainsFold: String
  """avatar_updated_at field predicates"""
  avatarUpdatedAt: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtNotNil: Boolean
  """last_seen field predicates"""
  lastSeen: Time
  lastSeenNEQ: Time
  lastSeenIn: [Time!]
  lastSeenNotIn: [Time!]
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenIsNil: Boolean
  lastSeenNotNil: Boolean
  """sub field predicates"""
  sub: String
  subNEQ: String
  subIn: [String!]
  subNotIn: [String!]
  subGT: String
  subGTE: String
  subLT: String
  subLTE: String
  subContains: String
  subHasPrefix: String
  subHasSuffix: String
  subIsNil: Boolean
  subNotNil: Boolean
  subEqualFold: String
  subContainsFold: String
  """oauth field predicates"""
  oauth: Boolean
  oauthNEQ: Boolean
  """organizations edge predicates"""
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """sessions edge predicates"""
  hasSessions: Boolean
  hasSessionsWith: [SessionWhereInput!]
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """personal_access_tokens edge predicates"""
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [UserSettingWhereInput!]
  """refreshtoken edge predicates"""
  hasRefreshtoken: Boolean
  hasRefreshtokenWith: [RefreshTokenWhereInput!]
}
