// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/groupsettings"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/membership"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/session"
	"github.com/datumforge/datum/internal/ent/generated/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 7)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		},
		Type: "Group",
		Fields: map[string]*sqlgraph.FieldSpec{
			group.FieldCreatedAt:   {Type: field.TypeTime, Column: group.FieldCreatedAt},
			group.FieldUpdatedAt:   {Type: field.TypeTime, Column: group.FieldUpdatedAt},
			group.FieldCreatedBy:   {Type: field.TypeInt, Column: group.FieldCreatedBy},
			group.FieldUpdatedBy:   {Type: field.TypeInt, Column: group.FieldUpdatedBy},
			group.FieldName:        {Type: field.TypeString, Column: group.FieldName},
			group.FieldDescription: {Type: field.TypeString, Column: group.FieldDescription},
			group.FieldLogoURL:     {Type: field.TypeString, Column: group.FieldLogoURL},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsettings.Table,
			Columns: groupsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: groupsettings.FieldID,
			},
		},
		Type: "GroupSettings",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsettings.FieldCreatedAt:  {Type: field.TypeTime, Column: groupsettings.FieldCreatedAt},
			groupsettings.FieldUpdatedAt:  {Type: field.TypeTime, Column: groupsettings.FieldUpdatedAt},
			groupsettings.FieldCreatedBy:  {Type: field.TypeInt, Column: groupsettings.FieldCreatedBy},
			groupsettings.FieldUpdatedBy:  {Type: field.TypeInt, Column: groupsettings.FieldUpdatedBy},
			groupsettings.FieldVisibility: {Type: field.TypeEnum, Column: groupsettings.FieldVisibility},
			groupsettings.FieldJoinPolicy: {Type: field.TypeEnum, Column: groupsettings.FieldJoinPolicy},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integration.Table,
			Columns: integration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: integration.FieldID,
			},
		},
		Type: "Integration",
		Fields: map[string]*sqlgraph.FieldSpec{
			integration.FieldCreatedAt:   {Type: field.TypeTime, Column: integration.FieldCreatedAt},
			integration.FieldUpdatedAt:   {Type: field.TypeTime, Column: integration.FieldUpdatedAt},
			integration.FieldCreatedBy:   {Type: field.TypeInt, Column: integration.FieldCreatedBy},
			integration.FieldUpdatedBy:   {Type: field.TypeInt, Column: integration.FieldUpdatedBy},
			integration.FieldKind:        {Type: field.TypeString, Column: integration.FieldKind},
			integration.FieldDescription: {Type: field.TypeString, Column: integration.FieldDescription},
			integration.FieldSecretName:  {Type: field.TypeString, Column: integration.FieldSecretName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   membership.Table,
			Columns: membership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: membership.FieldID,
			},
		},
		Type: "Membership",
		Fields: map[string]*sqlgraph.FieldSpec{
			membership.FieldCreatedAt: {Type: field.TypeTime, Column: membership.FieldCreatedAt},
			membership.FieldUpdatedAt: {Type: field.TypeTime, Column: membership.FieldUpdatedAt},
			membership.FieldCreatedBy: {Type: field.TypeInt, Column: membership.FieldCreatedBy},
			membership.FieldUpdatedBy: {Type: field.TypeInt, Column: membership.FieldUpdatedBy},
			membership.FieldCurrent:   {Type: field.TypeBool, Column: membership.FieldCurrent},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt: {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt: {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldCreatedBy: {Type: field.TypeInt, Column: organization.FieldCreatedBy},
			organization.FieldUpdatedBy: {Type: field.TypeInt, Column: organization.FieldUpdatedBy},
			organization.FieldName:      {Type: field.TypeString, Column: organization.FieldName},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldCreatedAt: {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldUpdatedAt: {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldCreatedBy: {Type: field.TypeInt, Column: session.FieldCreatedBy},
			session.FieldUpdatedBy: {Type: field.TypeInt, Column: session.FieldUpdatedBy},
			session.FieldType:      {Type: field.TypeEnum, Column: session.FieldType},
			session.FieldDisabled:  {Type: field.TypeBool, Column: session.FieldDisabled},
			session.FieldToken:     {Type: field.TypeString, Column: session.FieldToken},
			session.FieldUserAgent: {Type: field.TypeString, Column: session.FieldUserAgent},
			session.FieldIps:       {Type: field.TypeString, Column: session.FieldIps},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:       {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:       {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldCreatedBy:       {Type: field.TypeInt, Column: user.FieldCreatedBy},
			user.FieldUpdatedBy:       {Type: field.TypeInt, Column: user.FieldUpdatedBy},
			user.FieldEmail:           {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldFirstName:       {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:        {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldDisplayName:     {Type: field.TypeString, Column: user.FieldDisplayName},
			user.FieldLocked:          {Type: field.TypeBool, Column: user.FieldLocked},
			user.FieldAvatarRemoteURL: {Type: field.TypeString, Column: user.FieldAvatarRemoteURL},
			user.FieldAvatarLocalFile: {Type: field.TypeString, Column: user.FieldAvatarLocalFile},
			user.FieldAvatarUpdatedAt: {Type: field.TypeTime, Column: user.FieldAvatarUpdatedAt},
			user.FieldSilencedAt:      {Type: field.TypeTime, Column: user.FieldSilencedAt},
			user.FieldSuspendedAt:     {Type: field.TypeTime, Column: user.FieldSuspendedAt},
			user.FieldRecoveryCode:    {Type: field.TypeString, Column: user.FieldRecoveryCode},
		},
	}
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
		},
		"Group",
		"GroupSettings",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.MembershipsTable,
			Columns: []string{group.MembershipsColumn},
			Bidi:    false,
		},
		"Group",
		"Membership",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsettings.GroupTable,
			Columns: []string{groupsettings.GroupColumn},
			Bidi:    false,
		},
		"GroupSettings",
		"Group",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OrganizationTable,
			Columns: []string{integration.OrganizationColumn},
			Bidi:    false,
		},
		"Integration",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.OrganizationTable,
			Columns: []string{membership.OrganizationColumn},
			Bidi:    false,
		},
		"Membership",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.UserTable,
			Columns: []string{membership.UserColumn},
			Bidi:    false,
		},
		"Membership",
		"User",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.GroupTable,
			Columns: []string{membership.GroupColumn},
			Bidi:    false,
		},
		"Membership",
		"Group",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MembershipsTable,
			Columns: []string{organization.MembershipsColumn},
			Bidi:    false,
		},
		"Organization",
		"Membership",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
		},
		"Organization",
		"Integration",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   session.UsersTable,
			Columns: []string{session.UsersColumn},
			Bidi:    false,
		},
		"Session",
		"User",
	)
	graph.MustAddE(
		"memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MembershipsTable,
			Columns: []string{user.MembershipsColumn},
			Bidi:    false,
		},
		"User",
		"Membership",
	)
	graph.MustAddE(
		"sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
		},
		"User",
		"Session",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (gq *GroupQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupQuery builder.
func (gq *GroupQuery) Filter() *GroupFilter {
	return &GroupFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMutation builder.
func (m *GroupMutation) Filter() *GroupFilter {
	return &GroupFilter{config: m.config, predicateAdder: m}
}

// GroupFilter provides a generic filtering capability at runtime for GroupQuery.
type GroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GroupFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(group.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *GroupFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(group.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *GroupFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(group.FieldUpdatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(group.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(group.FieldDescription))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldLogoURL))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *GroupFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *GroupFilter) WhereHasSettingWith(preds ...predicate.GroupSettings) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *GroupFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gsq *GroupSettingsQuery) addPredicate(pred func(s *sql.Selector)) {
	gsq.predicates = append(gsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingsQuery builder.
func (gsq *GroupSettingsQuery) Filter() *GroupSettingsFilter {
	return &GroupSettingsFilter{config: gsq.config, predicateAdder: gsq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingsMutation builder.
func (m *GroupSettingsMutation) Filter() *GroupSettingsFilter {
	return &GroupSettingsFilter{config: m.config, predicateAdder: m}
}

// GroupSettingsFilter provides a generic filtering capability at runtime for GroupSettingsQuery.
type GroupSettingsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GroupSettingsFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(groupsettings.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettings.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsettings.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *GroupSettingsFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(groupsettings.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *GroupSettingsFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(groupsettings.FieldUpdatedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingsFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsettings.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingsFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsettings.FieldJoinPolicy))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupSettingsFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupSettingsFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *IntegrationQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationQuery builder.
func (iq *IntegrationQuery) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationMutation builder.
func (m *IntegrationMutation) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: m.config, predicateAdder: m}
}

// IntegrationFilter provides a generic filtering capability at runtime for IntegrationQuery.
type IntegrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *IntegrationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(integration.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *IntegrationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(integration.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *IntegrationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(integration.FieldUpdatedBy))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integration.FieldKind))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integration.FieldDescription))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *IntegrationFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(integration.FieldSecretName))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *IntegrationFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MembershipQuery builder.
func (mq *MembershipQuery) Filter() *MembershipFilter {
	return &MembershipFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MembershipMutation builder.
func (m *MembershipMutation) Filter() *MembershipFilter {
	return &MembershipFilter{config: m.config, predicateAdder: m}
}

// MembershipFilter provides a generic filtering capability at runtime for MembershipQuery.
type MembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MembershipFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(membership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(membership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *MembershipFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(membership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *MembershipFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(membership.FieldUpdatedBy))
}

// WhereCurrent applies the entql bool predicate on the current field.
func (f *MembershipFilter) WhereCurrent(p entql.BoolP) {
	f.Where(p.Field(membership.FieldCurrent))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *MembershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *MembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *MembershipFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *MembershipFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *OrganizationFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(organization.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *OrganizationFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(organization.FieldUpdatedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *OrganizationFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *OrganizationFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{config: m.config, predicateAdder: m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SessionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(session.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *SessionFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(session.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *SessionFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(session.FieldUpdatedBy))
}

// WhereType applies the entql string predicate on the type field.
func (f *SessionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(session.FieldType))
}

// WhereDisabled applies the entql bool predicate on the disabled field.
func (f *SessionFilter) WhereDisabled(p entql.BoolP) {
	f.Where(p.Field(session.FieldDisabled))
}

// WhereToken applies the entql string predicate on the token field.
func (f *SessionFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(session.FieldToken))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *SessionFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(session.FieldUserAgent))
}

// WhereIps applies the entql string predicate on the ips field.
func (f *SessionFilter) WhereIps(p entql.StringP) {
	f.Where(p.Field(session.FieldIps))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *SessionFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *SessionFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql int predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.IntP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql int predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.IntP) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayName))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(user.FieldLocked))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFile applies the entql string predicate on the avatar_local_file field.
func (f *UserFilter) WhereAvatarLocalFile(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarLocalFile))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldAvatarUpdatedAt))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldSuspendedAt))
}

// WhereRecoveryCode applies the entql string predicate on the recovery_code field.
func (f *UserFilter) WhereRecoveryCode(p entql.StringP) {
	f.Where(p.Field(user.FieldRecoveryCode))
}

// WhereHasMemberships applies a predicate to check if query has an edge memberships.
func (f *UserFilter) WhereHasMemberships() {
	f.Where(entql.HasEdge("memberships"))
}

// WhereHasMembershipsWith applies a predicate to check if query has an edge memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasMembershipsWith(preds ...predicate.Membership) {
	f.Where(entql.HasEdgeWith("memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSessions applies a predicate to check if query has an edge sessions.
func (f *UserFilter) WhereHasSessions() {
	f.Where(entql.HasEdge("sessions"))
}

// WhereHasSessionsWith applies a predicate to check if query has an edge sessions with a given conditions (other predicates).
func (f *UserFilter) WhereHasSessionsWith(preds ...predicate.Session) {
	f.Where(entql.HasEdgeWith("sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
