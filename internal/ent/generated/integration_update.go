// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/google/uuid"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// IntegrationUpdate is the builder for updating Integration entities.
type IntegrationUpdate struct {
	config
	hooks    []Hook
	mutation *IntegrationMutation
}

// Where appends a list predicates to the IntegrationUpdate builder.
func (iu *IntegrationUpdate) Where(ps ...predicate.Integration) *IntegrationUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IntegrationUpdate) SetUpdatedAt(t time.Time) *IntegrationUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetCreatedBy sets the "created_by" field.
func (iu *IntegrationUpdate) SetCreatedBy(i int) *IntegrationUpdate {
	iu.mutation.ResetCreatedBy()
	iu.mutation.SetCreatedBy(i)
	return iu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iu *IntegrationUpdate) SetNillableCreatedBy(i *int) *IntegrationUpdate {
	if i != nil {
		iu.SetCreatedBy(*i)
	}
	return iu
}

// AddCreatedBy adds i to the "created_by" field.
func (iu *IntegrationUpdate) AddCreatedBy(i int) *IntegrationUpdate {
	iu.mutation.AddCreatedBy(i)
	return iu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (iu *IntegrationUpdate) ClearCreatedBy() *IntegrationUpdate {
	iu.mutation.ClearCreatedBy()
	return iu
}

// SetUpdatedBy sets the "updated_by" field.
func (iu *IntegrationUpdate) SetUpdatedBy(i int) *IntegrationUpdate {
	iu.mutation.ResetUpdatedBy()
	iu.mutation.SetUpdatedBy(i)
	return iu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iu *IntegrationUpdate) SetNillableUpdatedBy(i *int) *IntegrationUpdate {
	if i != nil {
		iu.SetUpdatedBy(*i)
	}
	return iu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iu *IntegrationUpdate) AddUpdatedBy(i int) *IntegrationUpdate {
	iu.mutation.AddUpdatedBy(i)
	return iu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iu *IntegrationUpdate) ClearUpdatedBy() *IntegrationUpdate {
	iu.mutation.ClearUpdatedBy()
	return iu
}

// SetDescription sets the "description" field.
func (iu *IntegrationUpdate) SetDescription(s string) *IntegrationUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *IntegrationUpdate) SetNillableDescription(s *string) *IntegrationUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *IntegrationUpdate) ClearDescription() *IntegrationUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (iu *IntegrationUpdate) SetOrganizationID(id uuid.UUID) *IntegrationUpdate {
	iu.mutation.SetOrganizationID(id)
	return iu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (iu *IntegrationUpdate) SetOrganization(o *Organization) *IntegrationUpdate {
	return iu.SetOrganizationID(o.ID)
}

// Mutation returns the IntegrationMutation object of the builder.
func (iu *IntegrationUpdate) Mutation() *IntegrationMutation {
	return iu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (iu *IntegrationUpdate) ClearOrganization() *IntegrationUpdate {
	iu.mutation.ClearOrganization()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IntegrationUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IntegrationUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IntegrationUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IntegrationUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IntegrationUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if integration.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized integration.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := integration.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iu *IntegrationUpdate) check() error {
	if _, ok := iu.mutation.OrganizationID(); iu.mutation.OrganizationCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Integration.organization"`)
	}
	return nil
}

func (iu *IntegrationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(integration.Table, integration.Columns, sqlgraph.NewFieldSpec(integration.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(integration.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.CreatedBy(); ok {
		_spec.SetField(integration.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(integration.FieldCreatedBy, field.TypeInt, value)
	}
	if iu.mutation.CreatedByCleared() {
		_spec.ClearField(integration.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := iu.mutation.UpdatedBy(); ok {
		_spec.SetField(integration.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(integration.FieldUpdatedBy, field.TypeInt, value)
	}
	if iu.mutation.UpdatedByCleared() {
		_spec.ClearField(integration.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(integration.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(integration.FieldDescription, field.TypeString)
	}
	if iu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OrganizationTable,
			Columns: []string{integration.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = iu.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OrganizationTable,
			Columns: []string{integration.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = iu.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iu.schemaConfig.Integration
	ctx = internal.NewSchemaConfigContext(ctx, iu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IntegrationUpdateOne is the builder for updating a single Integration entity.
type IntegrationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntegrationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IntegrationUpdateOne) SetUpdatedAt(t time.Time) *IntegrationUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetCreatedBy sets the "created_by" field.
func (iuo *IntegrationUpdateOne) SetCreatedBy(i int) *IntegrationUpdateOne {
	iuo.mutation.ResetCreatedBy()
	iuo.mutation.SetCreatedBy(i)
	return iuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iuo *IntegrationUpdateOne) SetNillableCreatedBy(i *int) *IntegrationUpdateOne {
	if i != nil {
		iuo.SetCreatedBy(*i)
	}
	return iuo
}

// AddCreatedBy adds i to the "created_by" field.
func (iuo *IntegrationUpdateOne) AddCreatedBy(i int) *IntegrationUpdateOne {
	iuo.mutation.AddCreatedBy(i)
	return iuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (iuo *IntegrationUpdateOne) ClearCreatedBy() *IntegrationUpdateOne {
	iuo.mutation.ClearCreatedBy()
	return iuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iuo *IntegrationUpdateOne) SetUpdatedBy(i int) *IntegrationUpdateOne {
	iuo.mutation.ResetUpdatedBy()
	iuo.mutation.SetUpdatedBy(i)
	return iuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iuo *IntegrationUpdateOne) SetNillableUpdatedBy(i *int) *IntegrationUpdateOne {
	if i != nil {
		iuo.SetUpdatedBy(*i)
	}
	return iuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iuo *IntegrationUpdateOne) AddUpdatedBy(i int) *IntegrationUpdateOne {
	iuo.mutation.AddUpdatedBy(i)
	return iuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iuo *IntegrationUpdateOne) ClearUpdatedBy() *IntegrationUpdateOne {
	iuo.mutation.ClearUpdatedBy()
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IntegrationUpdateOne) SetDescription(s string) *IntegrationUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *IntegrationUpdateOne) SetNillableDescription(s *string) *IntegrationUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *IntegrationUpdateOne) ClearDescription() *IntegrationUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (iuo *IntegrationUpdateOne) SetOrganizationID(id uuid.UUID) *IntegrationUpdateOne {
	iuo.mutation.SetOrganizationID(id)
	return iuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (iuo *IntegrationUpdateOne) SetOrganization(o *Organization) *IntegrationUpdateOne {
	return iuo.SetOrganizationID(o.ID)
}

// Mutation returns the IntegrationMutation object of the builder.
func (iuo *IntegrationUpdateOne) Mutation() *IntegrationMutation {
	return iuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (iuo *IntegrationUpdateOne) ClearOrganization() *IntegrationUpdateOne {
	iuo.mutation.ClearOrganization()
	return iuo
}

// Where appends a list predicates to the IntegrationUpdate builder.
func (iuo *IntegrationUpdateOne) Where(ps ...predicate.Integration) *IntegrationUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IntegrationUpdateOne) Select(field string, fields ...string) *IntegrationUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Integration entity.
func (iuo *IntegrationUpdateOne) Save(ctx context.Context) (*Integration, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IntegrationUpdateOne) SaveX(ctx context.Context) *Integration {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IntegrationUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IntegrationUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IntegrationUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if integration.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized integration.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := integration.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IntegrationUpdateOne) check() error {
	if _, ok := iuo.mutation.OrganizationID(); iuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "Integration.organization"`)
	}
	return nil
}

func (iuo *IntegrationUpdateOne) sqlSave(ctx context.Context) (_node *Integration, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(integration.Table, integration.Columns, sqlgraph.NewFieldSpec(integration.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Integration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, integration.FieldID)
		for _, f := range fields {
			if !integration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != integration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(integration.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.CreatedBy(); ok {
		_spec.SetField(integration.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(integration.FieldCreatedBy, field.TypeInt, value)
	}
	if iuo.mutation.CreatedByCleared() {
		_spec.ClearField(integration.FieldCreatedBy, field.TypeInt)
	}
	if value, ok := iuo.mutation.UpdatedBy(); ok {
		_spec.SetField(integration.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(integration.FieldUpdatedBy, field.TypeInt, value)
	}
	if iuo.mutation.UpdatedByCleared() {
		_spec.ClearField(integration.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(integration.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(integration.FieldDescription, field.TypeString)
	}
	if iuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OrganizationTable,
			Columns: []string{integration.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = iuo.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OrganizationTable,
			Columns: []string{integration.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = iuo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = iuo.schemaConfig.Integration
	ctx = internal.NewSchemaConfigContext(ctx, iuo.schemaConfig)
	_node = &Integration{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
