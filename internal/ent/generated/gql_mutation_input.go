// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/session"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
)

// CreateEntitlementInput represents a mutation input for creating entitlements.
type CreateEntitlementInput struct {
	CreatedAt              *time.Time
	UpdatedAt              *time.Time
	CreatedBy              *string
	UpdatedBy              *string
	Tier                   *entitlement.Tier
	ExternalCustomerID     *string
	ExternalSubscriptionID *string
	ExpiresAt              *time.Time
	UpgradedAt             *time.Time
	UpgradedTier           *string
	DowngradedAt           *time.Time
	DowngradedTier         *string
	Cancelled              *bool
	OwnerID                *string
}

// Mutate applies the CreateEntitlementInput on the EntitlementMutation builder.
func (i *CreateEntitlementInput) Mutate(m *EntitlementMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Tier; v != nil {
		m.SetTier(*v)
	}
	if v := i.ExternalCustomerID; v != nil {
		m.SetExternalCustomerID(*v)
	}
	if v := i.ExternalSubscriptionID; v != nil {
		m.SetExternalSubscriptionID(*v)
	}
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.UpgradedAt; v != nil {
		m.SetUpgradedAt(*v)
	}
	if v := i.UpgradedTier; v != nil {
		m.SetUpgradedTier(*v)
	}
	if v := i.DowngradedAt; v != nil {
		m.SetDowngradedAt(*v)
	}
	if v := i.DowngradedTier; v != nil {
		m.SetDowngradedTier(*v)
	}
	if v := i.Cancelled; v != nil {
		m.SetCancelled(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateEntitlementInput on the EntitlementCreate builder.
func (c *EntitlementCreate) SetInput(i CreateEntitlementInput) *EntitlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntitlementInput represents a mutation input for updating entitlements.
type UpdateEntitlementInput struct {
	UpdatedAt                   *time.Time
	ClearUpdatedBy              bool
	UpdatedBy                   *string
	Tier                        *entitlement.Tier
	ClearExternalCustomerID     bool
	ExternalCustomerID          *string
	ClearExternalSubscriptionID bool
	ExternalSubscriptionID      *string
	ClearExpiresAt              bool
	ExpiresAt                   *time.Time
	ClearUpgradedAt             bool
	UpgradedAt                  *time.Time
	ClearUpgradedTier           bool
	UpgradedTier                *string
	ClearDowngradedAt           bool
	DowngradedAt                *time.Time
	ClearDowngradedTier         bool
	DowngradedTier              *string
	Cancelled                   *bool
	ClearOwner                  bool
	OwnerID                     *string
}

// Mutate applies the UpdateEntitlementInput on the EntitlementMutation builder.
func (i *UpdateEntitlementInput) Mutate(m *EntitlementMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Tier; v != nil {
		m.SetTier(*v)
	}
	if i.ClearExternalCustomerID {
		m.ClearExternalCustomerID()
	}
	if v := i.ExternalCustomerID; v != nil {
		m.SetExternalCustomerID(*v)
	}
	if i.ClearExternalSubscriptionID {
		m.ClearExternalSubscriptionID()
	}
	if v := i.ExternalSubscriptionID; v != nil {
		m.SetExternalSubscriptionID(*v)
	}
	if i.ClearExpiresAt {
		m.ClearExpiresAt()
	}
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if i.ClearUpgradedAt {
		m.ClearUpgradedAt()
	}
	if v := i.UpgradedAt; v != nil {
		m.SetUpgradedAt(*v)
	}
	if i.ClearUpgradedTier {
		m.ClearUpgradedTier()
	}
	if v := i.UpgradedTier; v != nil {
		m.SetUpgradedTier(*v)
	}
	if i.ClearDowngradedAt {
		m.ClearDowngradedAt()
	}
	if v := i.DowngradedAt; v != nil {
		m.SetDowngradedAt(*v)
	}
	if i.ClearDowngradedTier {
		m.ClearDowngradedTier()
	}
	if v := i.DowngradedTier; v != nil {
		m.SetDowngradedTier(*v)
	}
	if v := i.Cancelled; v != nil {
		m.SetCancelled(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateEntitlementInput on the EntitlementUpdate builder.
func (c *EntitlementUpdate) SetInput(i UpdateEntitlementInput) *EntitlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntitlementInput on the EntitlementUpdateOne builder.
func (c *EntitlementUpdateOne) SetInput(i UpdateEntitlementInput) *EntitlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	CreatedBy   *string
	UpdatedBy   *string
	Name        string
	Description *string
	LogoURL     string
	DisplayName *string
	SettingID   string
	UserIDs     []string
	OwnerID     *string
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetLogoURL(i.LogoURL)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	m.SetSettingID(i.SettingID)
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	Name           *string
	Description    *string
	LogoURL        *string
	DisplayName    *string
	SettingID      *string
	ClearUsers     bool
	AddUserIDs     []string
	RemoveUserIDs  []string
	ClearOwner     bool
	OwnerID        *string
}

// Mutate applies the UpdateGroupInput on the GroupMutation builder.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdate builder.
func (c *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdateOne builder.
func (c *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupSettingInput represents a mutation input for creating groupsettings.
type CreateGroupSettingInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	CreatedBy    *string
	UpdatedBy    *string
	Visibility   *groupsetting.Visibility
	JoinPolicy   *groupsetting.JoinPolicy
	Tags         []string
	SyncToSlack  *bool
	SyncToGithub *bool
	GroupID      *string
}

// Mutate applies the CreateGroupSettingInput on the GroupSettingMutation builder.
func (i *CreateGroupSettingInput) Mutate(m *GroupSettingMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	if v := i.JoinPolicy; v != nil {
		m.SetJoinPolicy(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.SyncToSlack; v != nil {
		m.SetSyncToSlack(*v)
	}
	if v := i.SyncToGithub; v != nil {
		m.SetSyncToGithub(*v)
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
}

// SetInput applies the change-set in the CreateGroupSettingInput on the GroupSettingCreate builder.
func (c *GroupSettingCreate) SetInput(i CreateGroupSettingInput) *GroupSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupSettingInput represents a mutation input for updating groupsettings.
type UpdateGroupSettingInput struct {
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	Visibility     *groupsetting.Visibility
	JoinPolicy     *groupsetting.JoinPolicy
	Tags           []string
	AppendTags     []string
	SyncToSlack    *bool
	SyncToGithub   *bool
	ClearGroup     bool
	GroupID        *string
}

// Mutate applies the UpdateGroupSettingInput on the GroupSettingMutation builder.
func (i *UpdateGroupSettingInput) Mutate(m *GroupSettingMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	if v := i.JoinPolicy; v != nil {
		m.SetJoinPolicy(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.SyncToSlack; v != nil {
		m.SetSyncToSlack(*v)
	}
	if v := i.SyncToGithub; v != nil {
		m.SetSyncToGithub(*v)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
}

// SetInput applies the change-set in the UpdateGroupSettingInput on the GroupSettingUpdate builder.
func (c *GroupSettingUpdate) SetInput(i UpdateGroupSettingInput) *GroupSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupSettingInput on the GroupSettingUpdateOne builder.
func (c *GroupSettingUpdateOne) SetInput(i UpdateGroupSettingInput) *GroupSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIntegrationInput represents a mutation input for creating integrations.
type CreateIntegrationInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	CreatedBy   *string
	UpdatedBy   *string
	Name        string
	Kind        string
	Description *string
	SecretName  string
	OwnerID     *string
}

// Mutate applies the CreateIntegrationInput on the IntegrationMutation builder.
func (i *CreateIntegrationInput) Mutate(m *IntegrationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetName(i.Name)
	m.SetKind(i.Kind)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetSecretName(i.SecretName)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateIntegrationInput on the IntegrationCreate builder.
func (c *IntegrationCreate) SetInput(i CreateIntegrationInput) *IntegrationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIntegrationInput represents a mutation input for updating integrations.
type UpdateIntegrationInput struct {
	UpdatedAt        *time.Time
	ClearUpdatedBy   bool
	UpdatedBy        *string
	Name             *string
	ClearDescription bool
	Description      *string
	ClearOwner       bool
	OwnerID          *string
}

// Mutate applies the UpdateIntegrationInput on the IntegrationMutation builder.
func (i *UpdateIntegrationInput) Mutate(m *IntegrationMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdate builder.
func (c *IntegrationUpdate) SetInput(i UpdateIntegrationInput) *IntegrationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdateOne builder.
func (c *IntegrationUpdateOne) SetInput(i UpdateIntegrationInput) *IntegrationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOauthProviderInput represents a mutation input for creating oauthproviders.
type CreateOauthProviderInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	CreatedBy    *string
	UpdatedBy    *string
	Name         string
	ClientID     string
	ClientSecret string
	RedirectURL  string
	Scopes       string
	AuthURL      string
	TokenURL     string
	AuthStyle    uint8
	InfoURL      string
	OwnerID      *string
}

// Mutate applies the CreateOauthProviderInput on the OauthProviderMutation builder.
func (i *CreateOauthProviderInput) Mutate(m *OauthProviderMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetName(i.Name)
	m.SetClientID(i.ClientID)
	m.SetClientSecret(i.ClientSecret)
	m.SetRedirectURL(i.RedirectURL)
	m.SetScopes(i.Scopes)
	m.SetAuthURL(i.AuthURL)
	m.SetTokenURL(i.TokenURL)
	m.SetAuthStyle(i.AuthStyle)
	m.SetInfoURL(i.InfoURL)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateOauthProviderInput on the OauthProviderCreate builder.
func (c *OauthProviderCreate) SetInput(i CreateOauthProviderInput) *OauthProviderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOauthProviderInput represents a mutation input for updating oauthproviders.
type UpdateOauthProviderInput struct {
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	Name           *string
	ClientID       *string
	ClientSecret   *string
	RedirectURL    *string
	Scopes         *string
	AuthURL        *string
	TokenURL       *string
	AuthStyle      *uint8
	InfoURL        *string
	ClearOwner     bool
	OwnerID        *string
}

// Mutate applies the UpdateOauthProviderInput on the OauthProviderMutation builder.
func (i *UpdateOauthProviderInput) Mutate(m *OauthProviderMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if v := i.ClientSecret; v != nil {
		m.SetClientSecret(*v)
	}
	if v := i.RedirectURL; v != nil {
		m.SetRedirectURL(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(*v)
	}
	if v := i.AuthURL; v != nil {
		m.SetAuthURL(*v)
	}
	if v := i.TokenURL; v != nil {
		m.SetTokenURL(*v)
	}
	if v := i.AuthStyle; v != nil {
		m.SetAuthStyle(*v)
	}
	if v := i.InfoURL; v != nil {
		m.SetInfoURL(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateOauthProviderInput on the OauthProviderUpdate builder.
func (c *OauthProviderUpdate) SetInput(i UpdateOauthProviderInput) *OauthProviderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOauthProviderInput on the OauthProviderUpdateOne builder.
func (c *OauthProviderUpdateOne) SetInput(i UpdateOauthProviderInput) *OauthProviderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	CreatedBy        *string
	UpdatedBy        *string
	DeletedAt        *time.Time
	DeletedBy        *string
	Name             string
	DisplayName      *string
	Description      *string
	ParentID         *string
	UserIDs          []string
	GroupIDs         []string
	IntegrationIDs   []string
	SettingID        *string
	EntitlementIDs   []string
	OauthproviderIDs []string
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	m.SetName(i.Name)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if v := i.EntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.OauthproviderIDs; len(v) > 0 {
		m.AddOauthproviderIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	UpdatedAt              *time.Time
	ClearUpdatedBy         bool
	UpdatedBy              *string
	ClearDeletedAt         bool
	DeletedAt              *time.Time
	ClearDeletedBy         bool
	DeletedBy              *string
	Name                   *string
	DisplayName            *string
	ClearDescription       bool
	Description            *string
	ClearUsers             bool
	AddUserIDs             []string
	RemoveUserIDs          []string
	ClearGroups            bool
	AddGroupIDs            []string
	RemoveGroupIDs         []string
	ClearIntegrations      bool
	AddIntegrationIDs      []string
	RemoveIntegrationIDs   []string
	ClearSetting           bool
	SettingID              *string
	ClearEntitlements      bool
	AddEntitlementIDs      []string
	RemoveEntitlementIDs   []string
	ClearOauthprovider     bool
	AddOauthproviderIDs    []string
	RemoveOauthproviderIDs []string
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearDeletedBy {
		m.ClearDeletedBy()
	}
	if v := i.DeletedBy; v != nil {
		m.SetDeletedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearSetting {
		m.ClearSetting()
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearEntitlements {
		m.ClearEntitlements()
	}
	if v := i.AddEntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.RemoveEntitlementIDs; len(v) > 0 {
		m.RemoveEntitlementIDs(v...)
	}
	if i.ClearOauthprovider {
		m.ClearOauthprovider()
	}
	if v := i.AddOauthproviderIDs; len(v) > 0 {
		m.AddOauthproviderIDs(v...)
	}
	if v := i.RemoveOauthproviderIDs; len(v) > 0 {
		m.RemoveOauthproviderIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationSettingInput represents a mutation input for creating organizationsettings.
type CreateOrganizationSettingInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	CreatedBy      *string
	UpdatedBy      *string
	Domains        []string
	SSOCert        *string
	SSOEntrypoint  *string
	SSOIssuer      *string
	BillingContact string
	BillingEmail   string
	BillingPhone   string
	BillingAddress string
	TaxIdentifier  string
	Tags           []string
	OrganizationID *string
}

// Mutate applies the CreateOrganizationSettingInput on the OrganizationSettingMutation builder.
func (i *CreateOrganizationSettingInput) Mutate(m *OrganizationSettingMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if v := i.SSOCert; v != nil {
		m.SetSSOCert(*v)
	}
	if v := i.SSOEntrypoint; v != nil {
		m.SetSSOEntrypoint(*v)
	}
	if v := i.SSOIssuer; v != nil {
		m.SetSSOIssuer(*v)
	}
	m.SetBillingContact(i.BillingContact)
	m.SetBillingEmail(i.BillingEmail)
	m.SetBillingPhone(i.BillingPhone)
	m.SetBillingAddress(i.BillingAddress)
	m.SetTaxIdentifier(i.TaxIdentifier)
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the CreateOrganizationSettingInput on the OrganizationSettingCreate builder.
func (c *OrganizationSettingCreate) SetInput(i CreateOrganizationSettingInput) *OrganizationSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationSettingInput represents a mutation input for updating organizationsettings.
type UpdateOrganizationSettingInput struct {
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	Domains           []string
	AppendDomains     []string
	SSOCert           *string
	SSOEntrypoint     *string
	SSOIssuer         *string
	BillingContact    *string
	BillingEmail      *string
	BillingPhone      *string
	BillingAddress    *string
	TaxIdentifier     *string
	ClearTags         bool
	Tags              []string
	AppendTags        []string
	ClearOrganization bool
	OrganizationID    *string
}

// Mutate applies the UpdateOrganizationSettingInput on the OrganizationSettingMutation builder.
func (i *UpdateOrganizationSettingInput) Mutate(m *OrganizationSettingMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if i.AppendDomains != nil {
		m.AppendDomains(i.Domains)
	}
	if v := i.SSOCert; v != nil {
		m.SetSSOCert(*v)
	}
	if v := i.SSOEntrypoint; v != nil {
		m.SetSSOEntrypoint(*v)
	}
	if v := i.SSOIssuer; v != nil {
		m.SetSSOIssuer(*v)
	}
	if v := i.BillingContact; v != nil {
		m.SetBillingContact(*v)
	}
	if v := i.BillingEmail; v != nil {
		m.SetBillingEmail(*v)
	}
	if v := i.BillingPhone; v != nil {
		m.SetBillingPhone(*v)
	}
	if v := i.BillingAddress; v != nil {
		m.SetBillingAddress(*v)
	}
	if v := i.TaxIdentifier; v != nil {
		m.SetTaxIdentifier(*v)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrganizationSettingInput on the OrganizationSettingUpdate builder.
func (c *OrganizationSettingUpdate) SetInput(i UpdateOrganizationSettingInput) *OrganizationSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationSettingInput on the OrganizationSettingUpdateOne builder.
func (c *OrganizationSettingUpdateOne) SetInput(i UpdateOrganizationSettingInput) *OrganizationSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonalAccessTokenInput represents a mutation input for creating personalaccesstokens.
type CreatePersonalAccessTokenInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	CreatedBy    *string
	UpdatedBy    *string
	Name         string
	Token        string
	Abilities    []string
	ExpirationAt time.Time
	LastUsedAt   *time.Time
	UserID       string
}

// Mutate applies the CreatePersonalAccessTokenInput on the PersonalAccessTokenMutation builder.
func (i *CreatePersonalAccessTokenInput) Mutate(m *PersonalAccessTokenMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetName(i.Name)
	m.SetToken(i.Token)
	if v := i.Abilities; v != nil {
		m.SetAbilities(v)
	}
	m.SetExpirationAt(i.ExpirationAt)
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreatePersonalAccessTokenInput on the PersonalAccessTokenCreate builder.
func (c *PersonalAccessTokenCreate) SetInput(i CreatePersonalAccessTokenInput) *PersonalAccessTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonalAccessTokenInput represents a mutation input for updating personalaccesstokens.
type UpdatePersonalAccessTokenInput struct {
	UpdatedAt       *time.Time
	ClearUpdatedBy  bool
	UpdatedBy       *string
	Name            *string
	Token           *string
	ClearAbilities  bool
	Abilities       []string
	AppendAbilities []string
	ExpirationAt    *time.Time
	ClearLastUsedAt bool
	LastUsedAt      *time.Time
	UserID          *string
}

// Mutate applies the UpdatePersonalAccessTokenInput on the PersonalAccessTokenMutation builder.
func (i *UpdatePersonalAccessTokenInput) Mutate(m *PersonalAccessTokenMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if i.ClearAbilities {
		m.ClearAbilities()
	}
	if v := i.Abilities; v != nil {
		m.SetAbilities(v)
	}
	if i.AppendAbilities != nil {
		m.AppendAbilities(i.Abilities)
	}
	if v := i.ExpirationAt; v != nil {
		m.SetExpirationAt(*v)
	}
	if i.ClearLastUsedAt {
		m.ClearLastUsedAt()
	}
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdatePersonalAccessTokenInput on the PersonalAccessTokenUpdate builder.
func (c *PersonalAccessTokenUpdate) SetInput(i UpdatePersonalAccessTokenInput) *PersonalAccessTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonalAccessTokenInput on the PersonalAccessTokenUpdateOne builder.
func (c *PersonalAccessTokenUpdateOne) SetInput(i UpdatePersonalAccessTokenInput) *PersonalAccessTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRefreshTokenInput represents a mutation input for creating refreshtokens.
type CreateRefreshTokenInput struct {
	ClientID                string
	Scopes                  []string
	Nonce                   string
	ClaimsUserID            string
	ClaimsUsername          string
	ClaimsEmail             string
	ClaimsEmailVerified     bool
	ClaimsGroups            []string
	ClaimsPreferredUsername string
	ConnectorID             string
	ConnectorData           []string
	Token                   string
	ObsoleteToken           string
	LastUsed                *time.Time
	UserID                  *string
}

// Mutate applies the CreateRefreshTokenInput on the RefreshTokenMutation builder.
func (i *CreateRefreshTokenInput) Mutate(m *RefreshTokenMutation) {
	m.SetClientID(i.ClientID)
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	m.SetNonce(i.Nonce)
	m.SetClaimsUserID(i.ClaimsUserID)
	m.SetClaimsUsername(i.ClaimsUsername)
	m.SetClaimsEmail(i.ClaimsEmail)
	m.SetClaimsEmailVerified(i.ClaimsEmailVerified)
	if v := i.ClaimsGroups; v != nil {
		m.SetClaimsGroups(v)
	}
	m.SetClaimsPreferredUsername(i.ClaimsPreferredUsername)
	m.SetConnectorID(i.ConnectorID)
	if v := i.ConnectorData; v != nil {
		m.SetConnectorData(v)
	}
	m.SetToken(i.Token)
	m.SetObsoleteToken(i.ObsoleteToken)
	if v := i.LastUsed; v != nil {
		m.SetLastUsed(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateRefreshTokenInput on the RefreshTokenCreate builder.
func (c *RefreshTokenCreate) SetInput(i CreateRefreshTokenInput) *RefreshTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRefreshTokenInput represents a mutation input for updating refreshtokens.
type UpdateRefreshTokenInput struct {
	ClientID                *string
	ClearScopes             bool
	Scopes                  []string
	AppendScopes            []string
	Nonce                   *string
	ClaimsUserID            *string
	ClaimsUsername          *string
	ClaimsEmail             *string
	ClaimsEmailVerified     *bool
	ClearClaimsGroups       bool
	ClaimsGroups            []string
	AppendClaimsGroups      []string
	ClaimsPreferredUsername *string
	ConnectorID             *string
	ClearConnectorData      bool
	ConnectorData           []string
	AppendConnectorData     []string
	Token                   *string
	ObsoleteToken           *string
	LastUsed                *time.Time
	ClearUser               bool
	UserID                  *string
}

// Mutate applies the UpdateRefreshTokenInput on the RefreshTokenMutation builder.
func (i *UpdateRefreshTokenInput) Mutate(m *RefreshTokenMutation) {
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if v := i.Nonce; v != nil {
		m.SetNonce(*v)
	}
	if v := i.ClaimsUserID; v != nil {
		m.SetClaimsUserID(*v)
	}
	if v := i.ClaimsUsername; v != nil {
		m.SetClaimsUsername(*v)
	}
	if v := i.ClaimsEmail; v != nil {
		m.SetClaimsEmail(*v)
	}
	if v := i.ClaimsEmailVerified; v != nil {
		m.SetClaimsEmailVerified(*v)
	}
	if i.ClearClaimsGroups {
		m.ClearClaimsGroups()
	}
	if v := i.ClaimsGroups; v != nil {
		m.SetClaimsGroups(v)
	}
	if i.AppendClaimsGroups != nil {
		m.AppendClaimsGroups(i.ClaimsGroups)
	}
	if v := i.ClaimsPreferredUsername; v != nil {
		m.SetClaimsPreferredUsername(*v)
	}
	if v := i.ConnectorID; v != nil {
		m.SetConnectorID(*v)
	}
	if i.ClearConnectorData {
		m.ClearConnectorData()
	}
	if v := i.ConnectorData; v != nil {
		m.SetConnectorData(v)
	}
	if i.AppendConnectorData != nil {
		m.AppendConnectorData(i.ConnectorData)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.ObsoleteToken; v != nil {
		m.SetObsoleteToken(*v)
	}
	if v := i.LastUsed; v != nil {
		m.SetLastUsed(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateRefreshTokenInput on the RefreshTokenUpdate builder.
func (c *RefreshTokenUpdate) SetInput(i UpdateRefreshTokenInput) *RefreshTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRefreshTokenInput on the RefreshTokenUpdateOne builder.
func (c *RefreshTokenUpdateOne) SetInput(i UpdateRefreshTokenInput) *RefreshTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSessionInput represents a mutation input for creating sessions.
type CreateSessionInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	CreatedBy *string
	UpdatedBy *string
	Type      session.Type
	Disabled  bool
	Token     *string
	UserAgent *string
	Ips       string
	UsersID   *string
}

// Mutate applies the CreateSessionInput on the SessionMutation builder.
func (i *CreateSessionInput) Mutate(m *SessionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetType(i.Type)
	m.SetDisabled(i.Disabled)
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.UserAgent; v != nil {
		m.SetUserAgent(*v)
	}
	m.SetIps(i.Ips)
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the CreateSessionInput on the SessionCreate builder.
func (c *SessionCreate) SetInput(i CreateSessionInput) *SessionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSessionInput represents a mutation input for updating sessions.
type UpdateSessionInput struct {
	UpdatedAt      *time.Time
	ClearUpdatedBy bool
	UpdatedBy      *string
	Disabled       *bool
	ClearUserAgent bool
	UserAgent      *string
	Ips            *string
	ClearUsers     bool
	UsersID        *string
}

// Mutate applies the UpdateSessionInput on the SessionMutation builder.
func (i *UpdateSessionInput) Mutate(m *SessionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Disabled; v != nil {
		m.SetDisabled(*v)
	}
	if i.ClearUserAgent {
		m.ClearUserAgent()
	}
	if v := i.UserAgent; v != nil {
		m.SetUserAgent(*v)
	}
	if v := i.Ips; v != nil {
		m.SetIps(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateSessionInput on the SessionUpdate builder.
func (c *SessionUpdate) SetInput(i UpdateSessionInput) *SessionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSessionInput on the SessionUpdateOne builder.
func (c *SessionUpdateOne) SetInput(i UpdateSessionInput) *SessionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt              *time.Time
	UpdatedAt              *time.Time
	CreatedBy              *string
	UpdatedBy              *string
	Email                  string
	FirstName              string
	LastName               string
	DisplayName            *string
	AvatarRemoteURL        *string
	AvatarLocalFile        *string
	AvatarUpdatedAt        *time.Time
	LastSeen               *time.Time
	PasswordHash           *string
	Sub                    *string
	Oauth                  *bool
	OrganizationIDs        []string
	SessionIDs             []string
	GroupIDs               []string
	PersonalAccessTokenIDs []string
	SettingID              string
	RefreshtokenIDs        []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	m.SetEmail(i.Email)
	m.SetFirstName(i.FirstName)
	m.SetLastName(i.LastName)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if v := i.AvatarLocalFile; v != nil {
		m.SetAvatarLocalFile(*v)
	}
	if v := i.AvatarUpdatedAt; v != nil {
		m.SetAvatarUpdatedAt(*v)
	}
	if v := i.LastSeen; v != nil {
		m.SetLastSeen(*v)
	}
	if v := i.PasswordHash; v != nil {
		m.SetPasswordHash(*v)
	}
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
	if v := i.Oauth; v != nil {
		m.SetOauth(*v)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.SessionIDs; len(v) > 0 {
		m.AddSessionIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.PersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	m.SetSettingID(i.SettingID)
	if v := i.RefreshtokenIDs; len(v) > 0 {
		m.AddRefreshtokenIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt                    *time.Time
	ClearUpdatedBy               bool
	UpdatedBy                    *string
	Email                        *string
	FirstName                    *string
	LastName                     *string
	DisplayName                  *string
	ClearAvatarRemoteURL         bool
	AvatarRemoteURL              *string
	ClearAvatarLocalFile         bool
	AvatarLocalFile              *string
	ClearAvatarUpdatedAt         bool
	AvatarUpdatedAt              *time.Time
	ClearLastSeen                bool
	LastSeen                     *time.Time
	ClearPasswordHash            bool
	PasswordHash                 *string
	ClearSub                     bool
	Sub                          *string
	Oauth                        *bool
	ClearOrganizations           bool
	AddOrganizationIDs           []string
	RemoveOrganizationIDs        []string
	ClearSessions                bool
	AddSessionIDs                []string
	RemoveSessionIDs             []string
	ClearGroups                  bool
	AddGroupIDs                  []string
	RemoveGroupIDs               []string
	ClearPersonalAccessTokens    bool
	AddPersonalAccessTokenIDs    []string
	RemovePersonalAccessTokenIDs []string
	SettingID                    *string
	ClearRefreshtoken            bool
	AddRefreshtokenIDs           []string
	RemoveRefreshtokenIDs        []string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAvatarRemoteURL {
		m.ClearAvatarRemoteURL()
	}
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if i.ClearAvatarLocalFile {
		m.ClearAvatarLocalFile()
	}
	if v := i.AvatarLocalFile; v != nil {
		m.SetAvatarLocalFile(*v)
	}
	if i.ClearAvatarUpdatedAt {
		m.ClearAvatarUpdatedAt()
	}
	if v := i.AvatarUpdatedAt; v != nil {
		m.SetAvatarUpdatedAt(*v)
	}
	if i.ClearLastSeen {
		m.ClearLastSeen()
	}
	if v := i.LastSeen; v != nil {
		m.SetLastSeen(*v)
	}
	if i.ClearPasswordHash {
		m.ClearPasswordHash()
	}
	if v := i.PasswordHash; v != nil {
		m.SetPasswordHash(*v)
	}
	if i.ClearSub {
		m.ClearSub()
	}
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
	if v := i.Oauth; v != nil {
		m.SetOauth(*v)
	}
	if i.ClearOrganizations {
		m.ClearOrganizations()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearSessions {
		m.ClearSessions()
	}
	if v := i.AddSessionIDs; len(v) > 0 {
		m.AddSessionIDs(v...)
	}
	if v := i.RemoveSessionIDs; len(v) > 0 {
		m.RemoveSessionIDs(v...)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearPersonalAccessTokens {
		m.ClearPersonalAccessTokens()
	}
	if v := i.AddPersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.RemovePersonalAccessTokenIDs; len(v) > 0 {
		m.RemovePersonalAccessTokenIDs(v...)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearRefreshtoken {
		m.ClearRefreshtoken()
	}
	if v := i.AddRefreshtokenIDs; len(v) > 0 {
		m.AddRefreshtokenIDs(v...)
	}
	if v := i.RemoveRefreshtokenIDs; len(v) > 0 {
		m.RemoveRefreshtokenIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserSettingInput represents a mutation input for creating usersettings.
type CreateUserSettingInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	CreatedBy      *string
	UpdatedBy      *string
	Locked         *bool
	SilencedAt     *time.Time
	SuspendedAt    *time.Time
	RecoveryCode   *string
	Status         *usersetting.Status
	Role           *usersetting.Role
	Permissions    []string
	EmailConfirmed *bool
	Tags           []string
	UserID         *string
}

// Mutate applies the CreateUserSettingInput on the UserSettingMutation builder.
func (i *CreateUserSettingInput) Mutate(m *UserSettingMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Locked; v != nil {
		m.SetLocked(*v)
	}
	if v := i.SilencedAt; v != nil {
		m.SetSilencedAt(*v)
	}
	if v := i.SuspendedAt; v != nil {
		m.SetSuspendedAt(*v)
	}
	if v := i.RecoveryCode; v != nil {
		m.SetRecoveryCode(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Permissions; v != nil {
		m.SetPermissions(v)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateUserSettingInput on the UserSettingCreate builder.
func (c *UserSettingCreate) SetInput(i CreateUserSettingInput) *UserSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserSettingInput represents a mutation input for updating usersettings.
type UpdateUserSettingInput struct {
	UpdatedAt         *time.Time
	ClearUpdatedBy    bool
	UpdatedBy         *string
	Locked            *bool
	ClearSilencedAt   bool
	SilencedAt        *time.Time
	ClearSuspendedAt  bool
	SuspendedAt       *time.Time
	ClearRecoveryCode bool
	RecoveryCode      *string
	Status            *usersetting.Status
	Role              *usersetting.Role
	Permissions       []string
	AppendPermissions []string
	EmailConfirmed    *bool
	Tags              []string
	AppendTags        []string
	ClearUser         bool
	UserID            *string
}

// Mutate applies the UpdateUserSettingInput on the UserSettingMutation builder.
func (i *UpdateUserSettingInput) Mutate(m *UserSettingMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearUpdatedBy {
		m.ClearUpdatedBy()
	}
	if v := i.UpdatedBy; v != nil {
		m.SetUpdatedBy(*v)
	}
	if v := i.Locked; v != nil {
		m.SetLocked(*v)
	}
	if i.ClearSilencedAt {
		m.ClearSilencedAt()
	}
	if v := i.SilencedAt; v != nil {
		m.SetSilencedAt(*v)
	}
	if i.ClearSuspendedAt {
		m.ClearSuspendedAt()
	}
	if v := i.SuspendedAt; v != nil {
		m.SetSuspendedAt(*v)
	}
	if i.ClearRecoveryCode {
		m.ClearRecoveryCode()
	}
	if v := i.RecoveryCode; v != nil {
		m.SetRecoveryCode(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Permissions; v != nil {
		m.SetPermissions(v)
	}
	if i.AppendPermissions != nil {
		m.AppendPermissions(i.Permissions)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserSettingInput on the UserSettingUpdate builder.
func (c *UserSettingUpdate) SetInput(i UpdateUserSettingInput) *UserSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserSettingInput on the UserSettingUpdateOne builder.
func (c *UserSettingUpdateOne) SetInput(i UpdateUserSettingInput) *UserSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
