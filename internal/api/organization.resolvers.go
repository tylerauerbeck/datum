package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/datumforge/datum/internal/echox"
	"github.com/datumforge/datum/internal/ent/generated"
	_ "github.com/datumforge/datum/internal/ent/generated/runtime"
	"github.com/google/uuid"

	oc "github.com/openfga/go-sdk/client"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input generated.CreateOrganizationInput) (*OrganizationCreatePayload, error) {
	// TODO - add permissions checks
	org, err := r.client.Organization.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			validationError := err.(*generated.ValidationError)

			r.logger.Debugw("validation error", "field", validationError.Name, "error", validationError.Error())

			return nil, validationError
		}

		if generated.IsConstraintError(err) {
			constraintError := err.(*generated.ConstraintError)

			r.logger.Debugw("constraint error", "error", constraintError.Error())

			return nil, constraintError
		}

		r.logger.Errorw("failed to create organization", "error", err)
		return nil, ErrInternalServerError
	}

	// Add relationship tuples
	r.fgaClient.CreateRelationshipTuple(
		ctx,
		[]oc.ClientTupleKey{{
			User:     "user:sfunkhouser",
			Relation: "member",
			Object:   fmt.Sprintf("organization:%s", org.ID),
		}},
	)

	return &OrganizationCreatePayload{Organization: org}, nil
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id uuid.UUID, input generated.UpdateOrganizationInput) (*OrganizationUpdatePayload, error) {
	// TODO - add permissions checks

	org, err := r.client.Organization.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get organization", "error", err)
		return nil, ErrInternalServerError
	}

	org, err = org.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to update organization", "error", err)
		return nil, ErrInternalServerError
	}

	return &OrganizationUpdatePayload{Organization: org}, nil
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id uuid.UUID) (*OrganizationDeletePayload, error) {
	// TODO - add permissions checks

	if err := r.client.Organization.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to delete organization", "error", err)
		return nil, err
	}

	return &OrganizationDeletePayload{DeletedID: id}, nil
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id uuid.UUID) (*generated.Organization, error) {
	ec, err := echox.EchoContextFromContext(ctx)
	if err != nil {
		r.logger.Errorw("unable to get echo context", "error", err)

		return nil, err
	}

	// Check permissions
	actor, err := echox.GetActorSubject(*ec)
	if err != nil {
		return nil, err
	}
	r.logger.Infow("Checking permissions", "user", actor, "organization", id)
	allow, err := r.fgaClient.CheckTuple(
		ctx,
		oc.ClientCheckRequest{
			User:     fmt.Sprintf("user:%s", actor),
			Relation: "member",
			Object:   fmt.Sprintf("organization:%s", id),
		},
	)
	if err != nil {
		return nil, err
	}

	if !allow {
		r.logger.Errorw("failed to get organization", "error", err)
		return nil, ErrNotFound
	}

	org, err := r.client.Organization.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, ErrNotFound
		}

		r.logger.Errorw("failed to get organization", "error", err)
		return nil, ErrInternalServerError
	}

	return org, nil
}
