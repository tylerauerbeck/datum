package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated"
	_ "github.com/datumforge/datum/internal/ent/generated/runtime"
	"github.com/datumforge/datum/internal/nanox"
)

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, input generated.CreateSessionInput) (*SessionCreatePayload, error) {
	// TODO - add permissions checks
	sess, err := r.client.Session.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to create session", "error", err)
		return nil, ErrInternalServerError
	}

	return &SessionCreatePayload{Session: sess}, nil
}

// UpdateSession is the resolver for the updateSession field.
func (r *mutationResolver) UpdateSession(ctx context.Context, id nanox.ID, input generated.UpdateSessionInput) (*SessionUpdatePayload, error) {
	// TODO - add permissions checks

	sess, err := r.client.Session.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get session", "error", err)
		return nil, ErrInternalServerError
	}

	sess, err = sess.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to update session", "error", err)
		return nil, ErrInternalServerError
	}

	return &SessionUpdatePayload{Session: sess}, nil
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, id nanox.ID) (*SessionDeletePayload, error) {
	// TODO - add permissions checks

	if err := r.client.Session.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to delete session", "error", err)
		return nil, err
	}

	return &SessionDeletePayload{DeletedID: id}, nil
}

// Session is the resolver for the session field.
func (r *queryResolver) Session(ctx context.Context, id nanox.ID) (*generated.Session, error) {
	// TODO - add permissions checks

	sess, err := r.client.Session.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get session", "error", err)
		return nil, ErrInternalServerError
	}

	return sess, nil
}
